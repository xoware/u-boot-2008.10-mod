--- arm1136/start.S	2008-11-12 03:50:49.000000000 +0000
+++ arm11mpcore/start.S	2011-03-24 06:54:26.000000000 +0000
@@ -1,7 +1,9 @@
 /*
- *  armboot - Startup Code for OMP2420/ARM1136 CPU-core
+ *  armboot - Startup Code for unknown CPU-core
  *
- *  Copyright (c) 2004	Texas Instruments <r-woodruff2@ti.com>
+ *  Copyright (c) 2003  Texas Instruments
+ *
+ *  ----- Adapted for OMAP1610 OMAP730 from ARM925t code ------
  *
  *  Copyright (c) 2001	Marius Gröger <mag@sysgo.de>
  *  Copyright (c) 2002	Alex Züpke <azu@sysgo.de>
@@ -19,7 +21,7 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -28,29 +30,35 @@
  * MA 02111-1307 USA
  */
 
+
 #include <config.h>
 #include <version.h>
+
+#include <cns3000.h>
+
+#ifdef CONFIG_CNS3000
+	//#define CNS3XXX_EARLY_DEBUG
+	#ifdef CNS3XXX_EARLY_DEBUG
+		#define CNS3XXX_EARLY_DEBUG_GPIO
+		#ifdef CNS3XXX_EARLY_DEBUG_GPIO
+			#define CNS3XXX_EARLY_DEBUG_GPIO_A_MASK 0x000000E0 /* GPIOA 5,6, and 7*/
+			#define CNS3XXX_EARLY_DEBUG_GPIO_CPU	(0x1<<5) 
+			#define CNS3XXX_EARLY_DEBUG_GPIO_DRAM	(0x1<<6) 
+			#define CNS3XXX_EARLY_DEBUG_GPIO_DTEST	(0x1<<7) 
+		#endif
+	#endif
+#endif
+/*
+ *************************************************************************
+ *
+ * Jump vector table
+ *
+ *************************************************************************
+ */
+
 .globl _start
-_start: b	reset
-#ifdef CONFIG_ONENAND_IPL
-	ldr	pc, _hang
-	ldr	pc, _hang
-	ldr	pc, _hang
-	ldr	pc, _hang
-	ldr	pc, _hang
-	ldr	pc, _hang
-	ldr	pc, _hang
-
-_hang:
-	.word	do_hang
-	.word	0x12345678
-	.word	0x12345678
-	.word	0x12345678
-	.word	0x12345678
-	.word	0x12345678
-	.word	0x12345678
-	.word	0x12345678	/* now 16*4=64 */
-#else
+_start:
+	b	start_code
 	ldr	pc, _undefined_instruction
 	ldr	pc, _software_interrupt
 	ldr	pc, _prefetch_abort
@@ -59,26 +67,30 @@
 	ldr	pc, _irq
 	ldr	pc, _fiq
 
-_undefined_instruction: .word undefined_instruction
-_software_interrupt:	.word software_interrupt
-_prefetch_abort:	.word prefetch_abort
-_data_abort:		.word data_abort
-_not_used:		.word not_used
-_irq:			.word irq
-_fiq:			.word fiq
-_pad:			.word 0x12345678 /* now 16*4=64 */
-#endif	/* CONFIG_ONENAND_IPL */
-.global _end_vect
-_end_vect:
+_undefined_instruction:
+	.word undefined_instruction
+_software_interrupt:
+	.word software_interrupt
+_prefetch_abort:
+	.word prefetch_abort
+_data_abort:
+	.word data_abort
+_not_used:
+	.word not_used
+_irq:
+	.word irq
+_fiq:
+	.word fiq
 
 	.balignl 16,0xdeadbeef
+
 /*
  *************************************************************************
  *
- * Startup Code (reset vector)
+ * Startup Code (called from the ARM reset exception vector)
  *
  * do important init only if we don't start from memory!
- * setup Memory and board specific bits prior to relocation.
+ * setup memory and board specific bits prior to relocation.
  * relocate armboot to ram
  * setup stack
  *
@@ -86,12 +98,18 @@
  */
 
 _TEXT_BASE:
-	.word	TEXT_BASE
+	.word	TEXT_BASE /* address of _start in the linked image */
 
 .globl _armboot_start
 _armboot_start:
 	.word _start
 
+#ifdef CONFIG_CNS3000
+.globl _armboot_mem_end
+_armboot_mem_end:
+	.word	0x08000000
+#endif
+
 /*
  * These are defined in the board-specific linker script.
  */
@@ -115,136 +133,300 @@
 	.word 0x0badc0de
 #endif
 
+
 /*
- * the actual reset code
+ * the actual start code
  */
-
-reset:
+.globl start_code
+start_code:
 	/*
 	 * set the cpu to SVC32 mode
 	 */
-	mrs	r0,cpsr
-	bic	r0,r0,#0x1f
-	orr	r0,r0,#0xd3
-	msr	cpsr,r0
-
-#ifdef CONFIG_OMAP2420H4
-       /* Copy vectors to mask ROM indirect addr */
-	adr	r0, _start		/* r0 <- current position of code   */
-		add     r0, r0, #4				/* skip reset vector			*/
-	mov	r2, #64			/* r2 <- size to copy  */
-	add	r2, r0, r2		/* r2 <- source end address	    */
-	mov	r1, #SRAM_OFFSET0	  /* build vect addr */
-	mov	r3, #SRAM_OFFSET1
-	add	r1, r1, r3
-	mov	r3, #SRAM_OFFSET2
-	add	r1, r1, r3
-next:
-	ldmia	r0!, {r3-r10}		/* copy from source address [r0]    */
-	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
-	cmp	r0, r2			/* until source end address [r2]    */
-	bne	next			/* loop until equal */
-	bl	cpy_clk_code		/* put dpll adjust code behind vectors */
+	mrs	r0, cpsr
+	bic	r0, r0,#0x1f
+	orr	r0, r0,#0xd3
+	msr	cpsr, r0
+
+	ldr r0, =0x73000020
+	mov r1, #1
+	str r1, [r0]
+
+	/*
+	 * we do sys-critical inits only at reboot,
+	 * not when booting from ram!
+	 */
+/*
+ *************************************************************************
+ *
+ * CPU_init_critical registers
+ *
+ * setup important registers
+ * setup memory timing
+ *
+ *************************************************************************
+ */
+cpu_init_crit:
+	/*
+	 * To run direct from reset some importent
+	 * initialisation code must be added here
+	 */
+	/* Ensure that the MMU and caches are off */
+	/* ?? flush v4 I/D caches */
+	mov	r0, #0
+	mcr	p15, 0, r0, c7, c7, 0	/* flush v3/v4 cache */
+	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */
+
+	/* ?? disable MMU stuff and caches */
+	mrc	p15, 0, r0, c1, c0, 0
+	bic	r0, r0, #0x00002300	@ clear bits 13, 9:8 (--V- --RS)
+	bic	r0, r0, #0x00000087	@ clear bits 7, 2:0 (B--- -CAM)
+	orr	r0, r0, #0x00000002	@ set bit 2 (A) Align
+	orr	r0, r0, #0x00001000	@ set bit 12 (I) I-Cache
+	mcr	p15, 0, r0, c1, c0, 0
+
+	/* 
+	 * Handle secondary mpcores
+	 * CPU1 enter dormant mode
+	 */
+
+	/* Read core number into r0 */
+	mrc	p15, 0, r0, c0, c0, 5
+	and	r0, r0, #0x0f
+
+	cmp	r0, #0x00
+	beq	primary_core
+	bl	secondary_cores
+
+primary_core:
+	/* 
+	 * Initialise memory 
+	 * Setup memory and board specific bits prior to relocation.
+	 */
+#ifdef CNS3XXX_EARLY_DEBUG
+	bl early_uart_init
+#ifdef CNS3XXX_EARLY_DEBUG_GPIO
+	bl early_gpioa_init
+	ldr r2, =CNS3XXX_EARLY_DEBUG_GPIO_CPU
+	bl output_led	
 #endif
-	/* the mask ROM code should have PLL and others stable */
-#ifndef CONFIG_SKIP_LOWLEVEL_INIT
-	bl  cpu_init_crit
+    ldr r2, =MSG_EARLY
+    bl outputstring
+
+    ldr r2, =MSG_LOWLEVEL
+    bl outputstring
+#endif
+	bl	lowlevel_init
+#ifdef CNS3XXX_EARLY_DEBUG_GPIO
+	ldr r2, =CNS3XXX_EARLY_DEBUG_GPIO_DRAM
+	bl output_led
+#endif
+
+#ifdef CNS3XXX_EARLY_DEBUG
+    ldr r0, =CNS3000_VEGA_MISC_BASE
+    ldr r1, [r0, #0x0]
+    cmp r1, #0x1
+	beq relocate	/* don't do simple test after re-mapped */
+
+    ldr r2, =MSG_DRAM_SIMPLE_TEST
+    bl outputstring
+	ldr	r0, =0x55555555	/* test pattern */
+	ldr r1, =0x20000	/* test size */
+	bl mem_simple_test	
+
+	cmp r0, r3
+	beq simple_test_ok
+    ldr r2, =MSG_FAIL
+	b dram_test_result
+simple_test_ok:
+#ifdef CNS3XXX_EARLY_DEBUG_GPIO
+	ldr r2, =CNS3XXX_EARLY_DEBUG_GPIO_DTEST
+	bl output_led
+#endif
+    ldr r2, =MSG_PASS
+dram_test_result:
+    bl outputstring
 #endif
 
-#ifndef CONFIG_SKIP_RELOCATE_UBOOT
 relocate:				/* relocate U-Boot to RAM	    */
-	adr	r0, _start		/* r0 <- current position of code   */
-	ldr	r1, _TEXT_BASE		/* test if we run from flash or RAM */
-	cmp	r0, r1			/* don't reloc during debug	    */
-#ifndef CONFIG_ONENAND_IPL
-	beq	stack_setup
-#endif	/* CONFIG_ONENAND_IPL */
+#ifdef CNS3XXX_EARLY_DEBUG
+    ldr r2, =MSG_RELOCATE
+    bl outputstring
+#endif
+	adr	r0, _start		/* pc relative  address of label    */
+
+#ifdef CONFIG_CNS3000
+	ldr	r1, =0x20000000
+#else
+	ldr	r1, _TEXT_BASE		/* linked image address of label    */
+	cmp	r0, r1                  /* test if we run from flash or RAM */
+	beq	stack_setup             /* ifeq we are in the RAM copy      */
+#endif
 
 	ldr	r2, _armboot_start
 	ldr	r3, _bss_start
-	sub	r2, r3, r2		/* r2 <- size of armboot	    */
-	add	r2, r0, r2		/* r2 <- source end address	    */
+	sub	r2, r3, r2		/* r2 <- size of armboot            */
+	add	r2, r0, r2		/* r2 <- source end address         */
 
 copy_loop:
 	ldmia	r0!, {r3-r10}		/* copy from source address [r0]    */
 	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
 	cmp	r0, r2			/* until source end addreee [r2]    */
 	ble	copy_loop
-#endif	/* CONFIG_SKIP_RELOCATE_UBOOT */
+
+#if 0
+#ifdef CONFIG_SPI_FLASH_BOOT
+	ldr	r0, =CONFIG_KERNEL_OFFSET
+	ldr	r1, =0x21000000		/* copy bootpImage from spi flash [r2] to [r1] */
+	ldr	r2, =CONFIG_KERNEL_OFFSET /* the start address of bootpImage */
+	ldr	r3, =CONFIG_KERNEL_END	/* the end address of bootpImage */
+	sub	r2, r3, r2		/* r2 <- size of bootpImage */
+	add	r2, r0, r2		/* r2 <- source end addr of bootpImage */
+
+linux_copy_loop:
+	ldmia	r0!, {r3-r10}		/* copy from source address [r0]    */
+	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
+	cmp	r0, r2			/* until source end addreee [r2]    */
+	ble	linux_copy_loop
+#endif /* CONFIG_SPI_FLASH_BOOT */
+#endif
+
+#ifdef CONFIG_CNS3000
+#ifdef CNS3XXX_EARLY_DEBUG
+    ldr r2, =MSG_REMAP
+    bl outputstring
+#endif
+	/* Re-map */
+	ldr	r0, =0x76000000
+	mov	r1, #1
+	str	r1, [r0]
+#endif
 
 	/* Set up the stack						    */
 stack_setup:
-	ldr	r0, _TEXT_BASE		/* upper 128 KiB: relocated uboot   */
-#ifdef CONFIG_ONENAND_IPL
-	sub	sp, r0, #128		/* leave 32 words for abort-stack   */
+#ifdef CONFIG_CNS3000
+	ldr	r0, _armboot_mem_end
 #else
-	sub	r0, r0, #CFG_MALLOC_LEN /* malloc area			    */
-	sub	r0, r0, #CFG_GBL_DATA_SIZE /* bdinfo			    */
+	ldr	r0, _TEXT_BASE		/* upper 128 KiB: relocated uboot   */
+#endif
+	sub	r0, r0, #CFG_MALLOC_LEN	/* malloc area                      */
+	sub	r0, r0, #CFG_GBL_DATA_SIZE /* bdinfo                        */
 #ifdef CONFIG_USE_IRQ
 	sub	r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)
 #endif
 	sub	sp, r0, #12		/* leave 3 words for abort-stack    */
-#endif	/* CONFIG_ONENAND_IPL */
 
 clear_bss:
-	ldr	r0, _bss_start		/* find start of bss segment	    */
-	ldr	r1, _bss_end		/* stop here			    */
-	mov	r2, #0x00000000		/* clear			    */
+	ldr	r0, _bss_start		/* find start of bss segment        */
+	ldr	r1, _bss_end		/* stop here                        */
+	mov 	r2, #0x00000000		/* clear                            */
 
-#ifndef CONFIG_ONENAND_IPL
-clbss_l:str	r2, [r0]		/* clear loop...		    */
+clbss_l:str	r2, [r0]		/* clear loop...                    */
 	add	r0, r0, #4
 	cmp	r0, r1
-	bne	clbss_l
-#endif
+	ble	clbss_l
 
-	ldr	pc, _start_armboot
+#ifdef CNS3XXX_EARLY_DEBUG
+    ldr r2, =MSG_START_ARMBOOT
+    bl outputstring
 
-#ifdef CONFIG_ONENAND_IPL
-_start_armboot: .word start_oneboot
-#else
-_start_armboot: .word start_armboot
+    ldr r0, =CNS3000_VEGA_PMU_BASE
+    str r4, [r0, #0x1C]
 #endif
+	ldr	pc, _start_armboot
 
+_start_armboot:
+	.word start_armboot
 
-/*
- *************************************************************************
- *
- * CPU_init_critical registers
- *
- * setup important registers
- * setup memory timing
- *
- *************************************************************************
- */
-cpu_init_crit:
-	/*
-	 * flush v4 I/D caches
-	 */
-	mov	r0, #0
-	mcr	p15, 0, r0, c7, c7, 0	/* flush v3/v4 cache */
-	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */
-
-	/*
-	 * disable MMU stuff and caches
-	 */
-	mrc	p15, 0, r0, c1, c0, 0
-	bic	r0, r0, #0x00002300	@ clear bits 13, 9:8 (--V- --RS)
-	bic	r0, r0, #0x00000087	@ clear bits 7, 2:0 (B--- -CAM)
-	orr	r0, r0, #0x00000002	@ set bit 2 (A) Align
-	orr	r0, r0, #0x00001000	@ set bit 12 (I) I-Cache
-	mcr	p15, 0, r0, c1, c0, 0
+#ifdef CNS3XXX_EARLY_DEBUG
+early_uart_init:
+    ldr r0, =CNS3000_VEGA_PMU_BASE
+    ldr r4, [r0, #0x1C]
+    ldr r1, =0x00003FF4 /* Enable 24 MHz UART clock */
+    str r1, [r0, #0x1C]
+
+    ldr r1, =0x0000004f
+    str r1, [r0, #0x00] /* enable UART0 clock and reset it */
+
+	ldr r1, [r0, #0x4]
+	orr r1, r1, #(0x1<<6)
+	str r1, [r0, #0x4]
+	//ldr r1, =0x3000004f
+	//str r1, [r0, #0x04] /* do UAT0 software rest*/
+    ldr r0, =CNS3000_VEGA_UART0_BASE
+    ldr r1, =0x00000080 /* Enter DLAB */
+    str r1, [r0, #0x0C]
+    ldr r1, =0x00000001 /* pre-scalar value => 24MHz */
+    str r1, [r0, #0x08] /* PSR */
+    ldr r1, =0x00000027 /* DLL */
+    str r1, [r0, #0x00]
+    ldr r1, =0x00000000 /* DLM */
+    str r1, [r0, #0x04]
+    ldr r1, =0x00000000 /* Exit DLAB */
+    str r1, [r0, #0x0C]
+    ldr r1, =0x00000003 /* 8N1 */
+    str r1, [r0, #0x0C]
+    ldr r1, =0x00000087
+    str r1, [r0, #0x08]
+    mov pc, lr
+
+outputstring:
+    ldr r0, =CNS3000_VEGA_UART0_BASE
+load_character:
+    ldrb r3, [r2], #1
+    cmp r3, #0x0
+    beq outputstring_done
+print_character:
+    ldr r1, [r0, #0x14]
+    and r1, r1, #0x20
+    cmp r1, #0x0
+    beq print_character
+    str r3, [r0, #0x00]
+    b load_character
+outputstring_done:
+    mov pc, lr
+
+mem_simple_test:	/* r0: test pattern, r1: test size */
+    ldr r2, =CNS3000_VEGA_DDR2SDRAM_BASE
+	add r2, r2, #0x1000000
+	add	r1, r1, r2
+2:
+	cmp	r2, r1
+	bhs	mem_simple_test_exit
+	str r0, [r2]
+	ldr r3, [r2]
+	cmp r3, r0
+	bne mem_simple_test_exit
+	add r2, r2, #4 
+	b	2b
+
+mem_simple_test_exit:
+    mov pc, lr
+#ifdef CNS3XXX_EARLY_DEBUG_GPIO
+
+early_gpioa_init:
+	ldr r0, =CNS3000_VEGA_PMU_BASE
+	ldr r1, [r0, #0x0]
+	orr r1, r1, #(0x1<<10)
+	str r1, [r0, #0x0]
+
+	ldr r1, [r0, #0x4]
+	orr r1, r1, #(0x1<<10)
+	str r1, [r0, #0x4]
+
+	ldr r0, =CNS3000_VEGA_GPIOA_BASE
+	ldr r1, =CNS3XXX_EARLY_DEBUG_GPIO_A_MASK
+	str r1, [r0, #0x00000008]
+	ldr r1, =CNS3XXX_EARLY_DEBUG_GPIO_A_MASK
+	str r1, [r0, #0x00000010]
+    mov pc, lr
+output_led:
+	ldr r0, =CNS3000_VEGA_GPIOA_BASE
+	str r2, [r0, #0x00000014]
+    mov pc, lr
 
-	/*
-	 * Jump to board specific initialization... The Mask ROM will have already initialized
-	 * basic memory.  Go here to bump up clock rate and handle wake up conditions.
-	 */
-	mov	ip, lr		/* persevere link reg across call */
-	bl	lowlevel_init	/* go setup pll,mux,memory */
-	mov	lr, ip		/* restore link */
-	mov	pc, lr		/* back to my caller */
+#endif
+#endif
 
-#ifndef CONFIG_ONENAND_IPL
 /*
  *************************************************************************
  *
@@ -252,6 +434,7 @@
  *
  *************************************************************************
  */
+
 @
 @ IRQ stack frame.
 @
@@ -286,30 +469,36 @@
  */
 
 	.macro	bad_save_user_regs
-	sub	sp, sp, #S_FRAME_SIZE		@ carve out a frame on current user stack
-	stmia	sp, {r0 - r12}			@ Save user registers (now in svc mode) r0-r12
+	@ carve out a frame on current user stack
+	sub	sp, sp, #S_FRAME_SIZE
+	stmia	sp, {r0 - r12}	@ Save user registers (now in svc mode) r0-r12
 
+#ifdef CONFIG_CNS3000
+	ldr	r2, _armboot_mem_end
+#else
 	ldr	r2, _armboot_start
-	sub	r2, r2, #(CFG_MALLOC_LEN)
-	sub	r2, r2, #(CFG_GBL_DATA_SIZE+8)	@ set base 2 words into abort stack
-	ldmia	r2, {r2 - r3}			@ get values for "aborted" pc and cpsr (into parm regs)
+#endif
+	sub	r2, r2, #(CONFIG_STACKSIZE+CFG_MALLOC_LEN)
+	sub	r2, r2, #(CFG_GBL_DATA_SIZE+8)  @ set base 2 words into abort stack
+	@ get values for "aborted" pc and cpsr (into parm regs)
+	ldmia	r2, {r2 - r3}
 	add	r0, sp, #S_FRAME_SIZE		@ grab pointer to old stack
-
 	add	r5, sp, #S_SP
 	mov	r1, lr
-	stmia	r5, {r0 - r3}			@ save sp_SVC, lr_SVC, pc, cpsr
-	mov	r0, sp				@ save current stack into r0 (param register)
+	stmia	r5, {r0 - r3}	@ save sp_SVC, lr_SVC, pc, cpsr
+	mov	r0, sp		@ save current stack into r0 (param register)
 	.endm
 
 	.macro	irq_save_user_regs
 	sub	sp, sp, #S_FRAME_SIZE
 	stmia	sp, {r0 - r12}			@ Calling r0-r12
-	add	r8, sp, #S_PC			@ !!!! R8 NEEDS to be saved !!!! a reserved stack spot would be good.
-	stmdb	r8, {sp, lr}^			@ Calling SP, LR
-	str	lr, [r8, #0]			@ Save calling PC
+	@ !!!! R8 NEEDS to be saved !!!! a reserved stack spot would be good.
+	add	r8, sp, #S_PC
+	stmdb	r8, {sp, lr}^		@ Calling SP, LR
+	str	lr, [r8, #0]		@ Save calling PC
 	mrs	r6, spsr
-	str	r6, [r8, #4]			@ Save CPSR
-	str	r0, [r8, #8]			@ Save OLD_R0
+	str	r6, [r8, #4]		@ Save CPSR
+	str	r0, [r8, #8]		@ Save OLD_R0
 	mov	r0, sp
 	.endm
 
@@ -318,36 +507,26 @@
 	mov	r0, r0
 	ldr	lr, [sp, #S_PC]			@ Get PC
 	add	sp, sp, #S_FRAME_SIZE
-	subs	pc, lr, #4			@ return & move spsr_svc into cpsr
+	subs	pc, lr, #4		@ return & move spsr_svc into cpsr
 	.endm
 
 	.macro get_bad_stack
-	ldr	r13, _armboot_start		@ setup our mode stack (enter in banked mode)
-	sub	r13, r13, #(CFG_MALLOC_LEN)	@ move past malloc pool
-	sub	r13, r13, #(CFG_GBL_DATA_SIZE+8) @ move to reserved a couple spots for abort stack
-
-	str	lr, [r13]			@ save caller lr in position 0 of saved stack
-	mrs	lr, spsr			@ get the spsr
-	str	lr, [r13, #4]			@ save spsr in position 1 of saved stack
+#ifdef CONFIG_CNS3000
+	ldr	r13, _armboot_mem_end
+#else
+	ldr	r13, _armboot_start		@ setup our mode stack
+#endif
+	sub	r13, r13, #(CONFIG_STACKSIZE+CFG_MALLOC_LEN)
+	sub	r13, r13, #(CFG_GBL_DATA_SIZE+8) @ reserved a couple spots in abort stack
 
-	mov	r13, #MODE_SVC			@ prepare SVC-Mode
+	str	lr, [r13]	@ save caller lr in position 0 of saved stack
+	mrs	lr, spsr	@ get the spsr
+	str	lr, [r13, #4]	@ save spsr in position 1 of saved stack
+	mov	r13, #MODE_SVC	@ prepare SVC-Mode
 	@ msr	spsr_c, r13
-	msr	spsr, r13			@ switch modes, make sure moves will execute
-	mov	lr, pc				@ capture return pc
-	movs	pc, lr				@ jump to next instruction & switch modes.
-	.endm
-
-	.macro get_bad_stack_swi
-	sub	r13, r13, #4			@ space on current stack for scratch reg.
-	str	r0, [r13]			@ save R0's value.
-	ldr	r0, _armboot_start		@ get data regions start
-	sub	r0, r0, #(CFG_MALLOC_LEN)	@ move past malloc pool
-	sub	r0, r0, #(CFG_GBL_DATA_SIZE+8)	@ move past gbl and a couple spots for abort stack
-	str	lr, [r0]			@ save caller lr in position 0 of saved stack
-	mrs	r0, spsr			@ get the spsr
-	str	lr, [r0, #4]			@ save spsr in position 1 of saved stack
-	ldr	r0, [r13]			@ restore r0
-	add	r13, r13, #4			@ pop stack entry
+	msr	spsr, r13	@ switch modes, make sure moves will execute
+	mov	lr, pc		@ capture return pc
+	movs	pc, lr		@ jump to next instruction & switch modes.
 	.endm
 
 	.macro get_irq_stack			@ setup IRQ stack
@@ -357,82 +536,107 @@
 	.macro get_fiq_stack			@ setup FIQ stack
 	ldr	sp, FIQ_STACK_START
 	.endm
-#endif	/* CONFIG_ONENAND_IPL */
 
 /*
  * exception handlers
  */
-#ifdef CONFIG_ONENAND_IPL
-	.align	5
-do_hang:
-	ldr	sp, _TEXT_BASE			/* use 32 words about stack */
-	bl	hang				/* hang and never return */
-#else	/* !CONFIG_ONENAND IPL */
-	.align	5
+	.align  5
+.globl undefined_instruction
 undefined_instruction:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_undefined_instruction
 
 	.align	5
+.globl software_interrupt
 software_interrupt:
-	get_bad_stack_swi
+	get_bad_stack
 	bad_save_user_regs
 	bl	do_software_interrupt
 
 	.align	5
+.globl prefetch_abort
 prefetch_abort:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_prefetch_abort
 
 	.align	5
+.globl data_abort
 data_abort:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_data_abort
 
 	.align	5
+.globl not_used
 not_used:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_not_used
 
 #ifdef CONFIG_USE_IRQ
-
 	.align	5
+.globl irq
 irq:
 	get_irq_stack
 	irq_save_user_regs
-	bl	do_irq
+	bl 	do_irq
 	irq_restore_user_regs
 
 	.align	5
+.globl fiq
 fiq:
 	get_fiq_stack
 	/* someone ought to write a more effiction fiq_save_user_regs */
 	irq_save_user_regs
-	bl	do_fiq
+	bl 	do_fiq
 	irq_restore_user_regs
 
 #else
 
 	.align	5
+.globl irq
 irq:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_irq
 
 	.align	5
+.globl fiq
 fiq:
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_fiq
 
 #endif
-	.align 5
-.global arm1136_cache_flush
-arm1136_cache_flush:
-		mcr	p15, 0, r1, c7, c5, 0	@ invalidate I cache
-		mov	pc, lr			@ back to caller
-#endif	/* CONFIG_ONENAND_IPL */
+
+	.align  5
+.globl reset_cpu
+reset_cpu:
+        /* Global Software Reset */
+	ldr	r0, =0x77000004
+	mov	r1, #0
+	str	r1, [r0]
+
+_loop_forever:
+        b       _loop_forever
+
+#ifdef CNS3XXX_EARLY_DEBUG
+MSG_EARLY:
+	.string "\r\nCNS3XXX Early Debug\r\n"
+MSG_LOWLEVEL:
+	.string "Low Level Init\r\n"
+MSG_RELOCATE:
+	.string "Relocate U-boot to DRAM\r\n"
+MSG_REMAP:
+	.string "Re-map\r\n"
+MSG_DRAM_SIMPLE_TEST:
+	.string "DRAM simple test..."
+MSG_PASS:
+	.string "pass\r\n"
+MSG_FAIL:
+	.string "fail\r\n"
+MSG_START_ARMBOOT:
+	.string "Start ARMBOOT......"
+#endif
